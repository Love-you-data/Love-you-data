-- Question 111
-- Table: Activity

-- +--------------+---------+
-- | Column Name  | Type    |
-- +--------------+---------+
-- | player_id    | int     |
-- | device_id    | int     |
-- | event_date   | date    |
-- | games_played | int     |
-- +--------------+---------+
-- (player_id, event_date) is the primary key of this table.
-- This table shows the activity of players of some game.
-- Each row is a record of a player who logged in and played a number of games (possibly 0) before logging out on some day using some device.
 

-- We define the install date of a player to be the first login day of that player.

-- We also define day 1 retention of some date X to be the number of players whose install date is X and they logged back in on the day right after X, divided by the number of players whose install date is X, rounded to 2 decimal places.

-- Write an SQL query that reports for each install date, the number of players that installed the game on that day and the day 1 retention.

-- The query result format is in the following example:

-- Activity table:
-- +-----------+-----------+------------+--------------+
-- | player_id | device_id | event_date | games_played |
-- +-----------+-----------+------------+--------------+
-- | 1         | 2         | 2016-03-01 | 5            |
-- | 1         | 2         | 2016-03-02 | 6            |
-- | 2         | 3         | 2017-06-25 | 1            |
-- | 3         | 1         | 2016-03-01 | 0            |
-- | 3         | 4         | 2016-07-03 | 5            |
-- +-----------+-----------+------------+--------------+

-- Result table:
-- +------------+----------+----------------+
-- | install_dt | installs | Day1_retention |
-- +------------+----------+----------------+
-- | 2016-03-01 | 2        | 0.50           |
-- | 2017-06-25 | 1        | 0.00           |
-- +------------+----------+----------------+
-- Player 1 and 3 installed the game on 2016-03-01 but only player 1 logged back in on 2016-03-02 so the
-- day 1 retention of 2016-03-01 is 1 / 2 = 0.50
-- Player 2 installed the game on 2017-06-25 but didn't log back in on 2017-06-26 so the day 1 retention of 2017-06-25 is 0 / 1 = 0.00
Create table If Not Exists Activity (player_id int, device_id int, event_date date, games_played int);
Truncate table Activity;
insert into Activity (player_id, device_id, event_date, games_played) values ('1', '2', '2016-03-01', '5');
insert into Activity (player_id, device_id, event_date, games_played) values ('1', '2', '2016-03-02', '6');
insert into Activity (player_id, device_id, event_date, games_played) values ('2', '3', '2017-06-25', '1');
insert into Activity (player_id, device_id, event_date, games_played) values ('3', '1', '2016-03-01', '0');
insert into Activity (player_id, device_id, event_date, games_played) values ('3', '4', '2018-07-03', '5');

insert into Activity (player_id, device_id, event_date, games_played) values ('4', '4', '2018-07-07', '5');
insert into Activity (player_id, device_id, event_date, games_played) values ('4', '4', '2018-07-08', '6');
insert into Activity (player_id, device_id, event_date, games_played) values ('5', '4', '2018-07-07', '7');

insert into Activity (player_id, device_id, event_date, games_played) values ('6', '4', '2018-07-07', '7');
insert into Activity (player_id, device_id, event_date, games_played) values ('6', '4', '2018-07-08', '8');

WITH t1 AS( 
SELECT player_id,MIN(event_date) OVER(PARTITION BY PLAYER_ID) as install_date
FROM Activity
GROUP BY player_id),
t2 AS(
SELECT a.player_id,a.event_date,install_date
FROM Activity a
 INNER JOIN t1 ON t1.player_id=a.player_id 
),
t3 AS(
SELECT a.install_date,COUNT(a.player_id) as nexth		         
from t2 a, t2 b
where a.install_date=b.install_date AND  A.event_date!=b.event_date AND 
a.player_id=b.player_id AND
a.event_date= date_add(b.event_date, INTERVAL 1 DAY) 
GROUP BY a.install_date
)

SELECT   t2.install_date, nexth/COUNT(DISTINCT t2.player_id) as ct
FROM t2
INNER JOIN t3 ON t2.install_date=t3.install_date
GROUP BY t2.install_date
UNION 
SELECT t1.install_date,0
FROM t1;
