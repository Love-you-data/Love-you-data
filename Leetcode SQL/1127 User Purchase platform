-- Table: Spending

-- +-------------+---------+
-- | Column Name | Type    |
-- +-------------+---------+
-- | user_id     | int     |
-- | spend_date  | date    |
-- | platform    | enum    | 
-- | amount      | int     |
-- +-------------+---------+
-- The table logs the spendings history of users that make purchases from an online shopping website which has a desktop and a mobile application.
-- (user_id, spend_date, platform) is the primary key of this table.
-- The platform column is an ENUM type of ('desktop', 'mobile').
-- Write an SQL query to find the total number of users and the total amount spent using mobile only, desktop only and both mobile and desktop together for each date.

-- The query result format is in the following example:

-- Spending table:
-- +---------+------------+----------+--------+
-- | user_id | spend_date | platform | amount |
-- +---------+------------+----------+--------+
-- | 1       | 2019-07-01 | mobile   | 100    |
-- | 1       | 2019-07-01 | desktop  | 100    |
-- | 2       | 2019-07-01 | mobile   | 100    |
-- | 2       | 2019-07-02 | mobile   | 100    |
-- | 3       | 2019-07-01 | desktop  | 100    |
-- | 3       | 2019-07-02 | desktop  | 100    |
-- +---------+------------+----------+--------+

-- Result table:
-- +------------+----------+--------------+-------------+
-- | spend_date | platform | total_amount | total_users |
-- +------------+----------+--------------+-------------+
-- | 2019-07-01 | desktop  | 100          | 1           |
-- | 2019-07-01 | mobile   | 100          | 1           |
-- | 2019-07-01 | both     | 200          | 1           |
-- | 2019-07-02 | desktop  | 100          | 1           |
-- | 2019-07-02 | mobile   | 100          | 1           |
-- | 2019-07-02 | both     | 0            | 0           |
-- +------------+----------+--------------+-------------+ 
-- On 2019-07-01, user 1 purchased using both desktop and mobile, user 2 purchased using mobile only and user 3 purchased using desktop only.
-- On 2019-07-02, user 2 purchased using mobile only, user 3 purchased using desktop only and no one purchased using both platforms.

CREATE TABLE spending(user_id int,spend_date date,platform text,amount int);
TRUNCATE TABLE spending;
INSERT INTO spending VALUES(1,"2019-07-01","mobile",100),
(1,"2019-07-01","desktop",100),
(2,"2019-07-01","mobile",100),
(2,"2019-07-02","mobile",100),
(3,"2019-07-01","desktop",100),
(3,"2019-07-02","desktop",100);
INSERT INTO spending VALUES(4,"2019-07-01","mobile",100);
INSERT INTO spending VALUES(5,"2019-07-03","desktop",100);
INSERT INTO spending VALUES(5,"2019-07-03","mobile",100);
WITH cte as(
SELECT spend_date,CASE WHEN group_concat(platform)="mobile,desktop" OR 
							group_concat(platform)="desktop,mobile" THEN "both" ELSE platform END as gc,
                            SUM(amount) as sm,COUNT(DISTINCT user_id) as ct

FROM spending
GROUP BY spend_date,user_id),
t1  as(
SELECT spend_date,gc,sum(ct)as users,sum(sm) as sm
 FROM cte
 GROUP BY spend_date,gc)
 
 SELECT ct.spend_date,ct.platform,IF(isnull(sm),0,sm) as total_amount,IF(isnull(users),0,users) as total_users
 FROM t1
 RIGHT JOIN (
 SELECT DISTINCT(spend_date), 'desktop' platform FROM Spending
UNION
SELECT DISTINCT(spend_date), 'mobile' platform FROM Spending
UNION
SELECT DISTINCT(spend_date), 'both' platform FROM Spending
 )CT
 on ct.spend_date=t1.spend_date AND ct.platform=t1.gc
 ORDER BY ct.spend_date
